from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Contact, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os

import database as db
import keyboards as kb
from config import ADMIN_ID, REVIEWS_CHANNEL, COURSE_POST_LINK, SOCIAL_LINKS
from admin import send_lead_to_admin, broadcast_message

router = Router()

class CalculationStates(StatesGroup):
    waiting_cargo_name = State()
    waiting_cargo_volume = State()
    waiting_cargo_weight = State()
    waiting_contact = State()

class DeliveryStates(StatesGroup):
    waiting_method = State()
    waiting_contact = State()

class BroadcastStates(StatesGroup):
    waiting_message = State()

class ServiceStates(StatesGroup):
    waiting_contact = State()
    waiting_name = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message):
    await db.add_user(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    welcome_text = """
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π –∏ –¥–æ—Å—Ç–∞–≤–∫–æ–π –≥—Ä—É–∑–æ–≤ –∏–∑ –ö–∏—Ç–∞—è.

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ:
    """
    
    try:
        photo_path = get_file_path("welcome.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo=photo, caption=welcome_text, reply_markup=kb.get_main_menu())
    except FileNotFoundError:
        await message.answer(welcome_text, reply_markup=kb.get_main_menu())

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    await message.answer("üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>", reply_markup=kb.get_admin_keyboard())

@router.message(F.text == "üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def create_broadcast(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    await message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastStates.waiting_message)

@router.message(StateFilter(BroadcastStates.waiting_message))
async def process_broadcast(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    
    users = await db.get_all_users()
    success_count = await broadcast_message(message.bot, users, message)
    
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    await state.clear()

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    users = await db.get_all_users()
    await message.answer(f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.get_main_menu())

# –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç
@router.message(F.text == "üìä –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç")
async def get_calculation(message: Message, state: FSMContext):
    await message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞ (–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ):", reply_markup=kb.get_back_to_menu())
    await state.set_state(CalculationStates.waiting_cargo_name)

@router.message(StateFilter(CalculationStates.waiting_cargo_name))
async def process_cargo_name(message: Message, state: FSMContext):
    await state.update_data(cargo_name=message.text)
    await message.answer("üìè –í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞:", reply_markup=kb.get_back_to_menu())
    await state.set_state(CalculationStates.waiting_cargo_volume)

@router.message(StateFilter(CalculationStates.waiting_cargo_volume))
async def process_cargo_volume(message: Message, state: FSMContext):
    await state.update_data(cargo_volume=message.text)
    await message.answer("‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞:", reply_markup=kb.get_back_to_menu())
    await state.set_state(CalculationStates.waiting_cargo_weight)

@router.message(StateFilter(CalculationStates.waiting_cargo_weight))
async def process_cargo_weight(message: Message, state: FSMContext):
    await state.update_data(cargo_weight=message.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–µ–ª–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    contact_shared = await db.is_contact_shared(message.from_user.id)
    
    if not contact_shared:
        await message.answer("üì± –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á—ë—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", reply_markup=kb.get_contact_keyboard())
        await state.set_state(CalculationStates.waiting_contact)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É
        data = await state.get_data()
        await send_lead_to_admin(message.bot, message.from_user.id, "–†–∞—Å—á—ë—Ç –¥–æ—Å—Ç–∞–≤–∫–∏", **data)
        await db.add_lead(message.from_user.id, "–†–∞—Å—á—ë—Ç –¥–æ—Å—Ç–∞–≤–∫–∏", **data)
        
        await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", 
                           reply_markup=kb.get_main_menu())
        await state.clear()

@router.message(StateFilter(CalculationStates.waiting_contact))
async def process_cargo_contact(message: Message, state: FSMContext):
    contact: Contact = message.contact
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.update_user_contact(message.from_user.id, contact.phone_number)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É
    data = await state.get_data()
    data['contact'] = contact.phone_number
    await send_lead_to_admin(message.bot, message.from_user.id, "–†–∞—Å—á—ë—Ç –¥–æ—Å—Ç–∞–≤–∫–∏", **data)
    await db.add_lead(message.from_user.id, "–†–∞—Å—á—ë—Ç –¥–æ—Å—Ç–∞–≤–∫–∏", **data)
    
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", 
                           reply_markup=kb.get_main_menu())
    await state.clear()

# –£—Å–ª—É–≥–∏
@router.message(F.text == "üõ† –£—Å–ª—É–≥–∏")
async def services_menu(message: Message):
    await message.answer("üõ† <b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —É—Å–ª—É–≥—É:", 
                        reply_markup=kb.get_services_menu())

# –î–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–æ–≤
@router.message(F.text == "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–æ–≤")
async def delivery_service(message: Message):
    text = """
üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–æ–≤ –∏–∑ –ö–∏—Ç–∞—è</b>

–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏:
‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ –ê–≤—Ç–æ—ç–∫—Å–ø—Ä–µ—Å—Å
‚Ä¢ –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞  
‚Ä¢ –ê–≤–∏–∞–¥–æ—Å—Ç–∞–≤–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.
    """
    
    try:
        photo_path = get_file_path("delivery.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo=photo, caption=text, reply_markup=kb.get_service_action("–î–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–æ–≤"))
    except FileNotFoundError:
        await message.answer(text, reply_markup=kb.get_service_action("–î–æ—Å—Ç–∞–≤–∫–∞ –≥—Ä—É–∑–æ–≤"))

# –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥
@router.message(F.text == "üí∞ –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥")
async def money_transfer(message: Message):
    text = """
üí∞ <b>–ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –≤ –ö–∏—Ç–∞–π</b>

–ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –≤ –ö–∏—Ç–∞–π –ø–æ –≤—ã–≥–æ–¥–Ω–æ–º—É –∫—É—Ä—Å—É.

‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    """
    
    try:
        photo_path = get_file_path("money.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo=photo, caption=text, reply_markup=kb.get_service_action("–ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥"))
    except FileNotFoundError:
        await message.answer(text, reply_markup=kb.get_service_action("–ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥"))
    
    await message.answer("‚¨ÖÔ∏è –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=kb.get_back_to_menu())

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
@router.message(F.text == "üõí –í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞")
async def product_buyout(message: Message):
    text = """
üõí <b>–í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞ –≤ –ö–∏—Ç–∞–µ</b>

–ü–æ–º–æ–∂–µ–º –≤—ã–∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä —É –∫–∏—Ç–∞–π—Å–∫–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Ü–µ—Å—Å–∞
    """
    try:
        photo_path = get_file_path("buyout.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo=photo, caption=text, reply_markup=kb.get_service_action("–í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞"))
    except FileNotFoundError:
        await message.answer(text, reply_markup=kb.get_service_action("–í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞"))

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
async def supplier_search(message: Message):
    text = """
üîç <b>–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</b>

–ù–∞–π–¥—ë–º –Ω–∞–¥—ë–∂–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
    """
    try:
        photo_path = get_file_path("supplier.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo=photo, caption=text, reply_markup=kb.get_service_action("–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"))
    except FileNotFoundError:
        await message.answer(text, reply_markup=kb.get_service_action("–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"))

@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑ –æ–±—Ä–∞–∑—Ü–æ–≤")
async def sample_order(message: Message):
    text = """
üì¶ <b>–ó–∞–∫–∞–∑ –æ–±—Ä–∞–∑—Ü–æ–≤</b>

–ó–∞–∫–∞–∂–µ–º –æ–±—Ä–∞–∑—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–±—Ä–∞–∑—Ü–æ–≤
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
    """
    try:
        photo_path = get_file_path("samples.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo=photo, caption=text, reply_markup=kb.get_service_action("–ó–∞–∫–∞–∑ –æ–±—Ä–∞–∑—Ü–æ–≤"))
    except FileNotFoundError:
        await message.answer(text, reply_markup=kb.get_service_action("–ó–∞–∫–∞–∑ –æ–±—Ä–∞–∑—Ü–æ–≤"))

@router.message(F.text == "üìã –§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç")
async def fulfillment(message: Message):
    text = """
üìã <b>–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç</b>

–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤:
‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –£–ø–∞–∫–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
    """
    try:
        photo_path = get_file_path("fulfillment.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo=photo, caption=text, reply_markup=kb.get_service_action("–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç"))
    except FileNotFoundError:
        await message.answer(text, reply_markup=kb.get_service_action("–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç"))

@router.message(F.text == "üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
async def certification(message: Message):
    text = """
üìú <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤</b>

–ü–æ–º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:
‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
‚Ä¢ –î–µ–∫–ª–∞—Ä–∞—Ü–∏–∏
‚Ä¢ –†–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    """
    try:
        photo_path = get_file_path("certification.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo=photo, caption=text, reply_markup=kb.get_service_action("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"))
    except FileNotFoundError:
        await message.answer(text, reply_markup=kb.get_service_action("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"))

# –û –Ω–∞—Å
@router.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: Message):
    text = """
‚ÑπÔ∏è <b>–û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b>

–ú—ã - –Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä –≤ —Å—Ñ–µ—Ä–µ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –≥—Ä—É–∑–æ–≤ –∏–∑ –ö–∏—Ç–∞—è.

üè¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 10 –ª–µ—Ç
üåç –û—Ñ–∏—Å—ã –≤ –†–æ—Å—Å–∏–∏ –∏ –ö–∏—Ç–∞–µ  
‚ö° –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
üíØ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ª—É–≥
    """
    
    try:
        photo_path = get_file_path("about.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo=photo, caption=text, reply_markup=kb.get_about_us_inline())
    except FileNotFoundError:
        await message.answer(text, reply_markup=kb.get_about_us_inline())
    
    await message.answer("‚¨ÖÔ∏è –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=kb.get_back_to_menu())

# –û—Ç–∑—ã–≤—ã
@router.message(F.text == "üí¨ –û—Ç–∑—ã–≤—ã")
async def reviews(message: Message):
    await message.answer(f"üí¨ –ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {REVIEWS_CHANNEL}")

# –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
@router.message(F.text == "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def useful_materials(message: Message):
    text = """
üìö <b>–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>

–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:
    """
    await message.answer(text, reply_markup=kb.get_materials_menu())

@router.message(F.text.in_(["üìò 3 –æ—à–∏–±–∫–∏ —Å–µ–ª–ª–µ—Ä–∞", "üìó –ö–∞–∫ –≤—ã–π—Ç–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã –≤ 2025"]))
async def send_material(message: Message):
    contact_shared = await db.is_contact_shared(message.from_user.id)
    
    if not contact_shared:
        await message.answer("üì± –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", 
                           reply_markup=kb.get_contact_keyboard())
    else:
        material_name = message.text
        await message.answer(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –º–∞—Ç–µ—Ä–∏–∞–ª: {material_name}")
        
        try:
            if "3 –æ—à–∏–±–∫–∏" in material_name:
                doc_path = get_file_path("guide1.pdf")
                document = FSInputFile(doc_path)
                await message.answer_document(document=document, caption="üìò 3 –æ—à–∏–±–∫–∏ —Å–µ–ª–ª–µ—Ä–∞")
            else:
                doc_path = get_file_path("guide2.pdf")
                document = FSInputFile(doc_path)
                await message.answer_document(document=document, caption="üìó –ö–∞–∫ –≤—ã–π—Ç–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã –≤ 2025")
        except FileNotFoundError:
            await message.answer("‚ùå –§–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# FAQ
@router.message(F.text == "‚ùì FAQ")
async def faq(message: Message):
    text = """
‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>

<b>Q: –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?</b>
A: –û—Ç 7 –¥–æ 30 –¥–Ω–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.

<b>Q: –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏?</b>
A: –ò–Ω–≤–æ–π—Å, —É–ø–∞–∫–æ–≤–æ—á–Ω—ã–π –ª–∏—Å—Ç, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ - —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã.

<b>Q: –ï—Å—Ç—å –ª–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞?</b>
A: –î–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ –≤–∏–¥—ã –¥–æ—Å—Ç–∞–≤–∫–∏.

<b>Q: –ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –≥—Ä—É–∑?</b>
A: –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
    """
    
    try:
        photo_path = get_file_path("faq.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo=photo, caption=text, reply_markup=kb.get_back_to_menu())
    except FileNotFoundError:
        await message.answer(text, reply_markup=kb.get_back_to_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message(F.contact)
async def process_contact(message: Message, state: FSMContext):
    contact: Contact = message.contact
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.update_user_contact(message.from_user.id, contact.phone_number)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω—É
    user_info = await db.get_user_info(message.from_user.id)
    contact_text = f"""
üì± <b>–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:</b>

üë§ –ò–º—è: {contact.first_name} {contact.last_name or ''}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone_number}
üÜî ID: {message.from_user.id}
üë§ Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
    """
    
    try:
        await message.bot.send_message(ADMIN_ID, contact_text)
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    current_state = await state.get_state()
    
    if current_state == CalculationStates.waiting_contact:
        data = await state.get_data()
        await send_lead_to_admin(message.bot, message.from_user.id, "–†–∞—Å—á—ë—Ç –¥–æ—Å—Ç–∞–≤–∫–∏", **data)
        await db.add_lead(message.from_user.id, "–†–∞—Å—á—ë—Ç –¥–æ—Å—Ç–∞–≤–∫–∏", **data)
        await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", 
                           reply_markup=kb.get_main_menu())
    elif current_state == ServiceStates.waiting_contact:
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=kb.get_main_menu())
        await state.clear()
    else:
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=kb.get_main_menu())
    
    await state.clear()

@router.callback_query(F.data == "company_card")
async def callback_company_card(callback: CallbackQuery):
    text = """
üè¢ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>

<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>

üí≥ <b>–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç:</b> 40802810820000396550
üè¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:</b> –û–û–û "–ë–∞–Ω–∫ –¢–æ—á–∫–∞"
üî¢ <b>–ë–ò–ö:</b> 044525104
üìã <b>–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á—ë—Ç:</b> 30101810745374525104
üÜî <b>–ò–ù–ù:</b> 481308422231
üìÑ <b>–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> –ò–ü –ö–∞–∑–∞–Ω—Ü–µ–≤ –ú–∞–∫—Å–∏–º –û–ª–µ–≥–æ–≤–∏—á
    """
    
    try:
        photo_path = get_file_path("organ.jpg")
        photo = FSInputFile(photo_path)
        await callback.message.answer_photo(photo=photo, caption=text)
    except FileNotFoundError:
        await callback.message.answer(text)
    
    await callback.answer()

@router.callback_query(F.data == "social_networks")
async def callback_social_networks(callback: CallbackQuery):
    try:
        photo_path = get_file_path("socials.jpg")
        photo = FSInputFile(photo_path)
        await callback.message.answer_photo(photo=photo, caption="üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:</b>", reply_markup=kb.get_social_networks())
    except FileNotFoundError:
        await callback.message.answer("üì± <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:</b>", reply_markup=kb.get_social_networks())
    await callback.answer()

# –ö—É—Ä—Å –≤–∞–ª—é—Ç
@router.message(F.text == "üìà –ö—É—Ä—Å")
async def course_button(message: Message):
    await message.answer(f"üí± <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç</b>\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å: {COURSE_POST_LINK}")

@router.message(F.text == "üìû –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É")
async def get_service(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–µ–ª–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    contact_shared = await db.is_contact_shared(message.from_user.id)
    
    if not contact_shared:
        await message.answer("üì± –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", reply_markup=kb.get_contact_keyboard())
        await state.set_state(ServiceStates.waiting_contact)
    else:
        await message.answer("üìù –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=kb.get_back_to_menu())
        await state.set_state(ServiceStates.waiting_name)

@router.callback_query(F.data.startswith("get_service_"))
async def callback_get_service(callback: CallbackQuery, state: FSMContext):
    service_name = callback.data.replace("get_service_", "").replace("_", " ")
    await state.update_data(service_type=service_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–µ–ª–∏–ª—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
    contact_shared = await db.is_contact_shared(callback.from_user.id)
    
    if not contact_shared:
        await callback.message.answer("üì± –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:", reply_markup=kb.get_contact_keyboard())
        await state.set_state(ServiceStates.waiting_contact)
    else:
        await callback.message.answer("üìù –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=kb.get_back_to_menu())
        await state.set_state(ServiceStates.waiting_name)
    
    await callback.answer()

@router.message(StateFilter(ServiceStates.waiting_name))
async def process_service_name(message: Message, state: FSMContext):
    user_name = message.text
    data = await state.get_data()
    service_type = data.get('service_type', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É—Å–ª—É–≥–∏
    service_text = f"""
üõ† <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É:</b>

üéØ <b>–£—Å–ª—É–≥–∞:</b> {service_type}
üë§ <b>–ò–º—è:</b> {user_name}
üÜî <b>ID:</b> {message.from_user.id}
üë§ <b>Username:</b> @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {await db.get_user_phone(message.from_user.id)}
    """
    
    try:
        await message.bot.send_message(ADMIN_ID, service_text)
    except:
        pass
    
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", 
                        reply_markup=kb.get_main_menu())
    await state.clear()

def get_file_path(filename):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ø–∞–ø–∫–µ files"""
    current_dir = os.path.dirname(os.path.abspath(__file__))
    return os.path.join(current_dir, "files", filename)
